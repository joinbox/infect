{"version":3,"sources":["js/matrix/resistency-matrix-old.es2015.js"],"names":["ResistencyMatrix","container","data","Error","_container","_data","_configuration","spaceBetweenLabelsAndMatrix","lineWeight","_elements","svg","_createSVG","drawMatrix","keyName","dontUpdateScale","console","log","_keyName","_columnScale","_createColumnScale","_colorScale","_createColorScale","_drawRows","bandwidth","_drawColumnHeads","_updateColumnScale","_updatePositionsAndSizes","rowHeight","Object","values","self","rows","selectAll","bacterium","id","enteredRows","enter","append","attr","d","i","each","row","_drawCell","error","text","_createSingleRowLabel","exit","remove","property","element","latinName","d3","select","antibiotics","map","item","antibiotic","name","length","scaleBand","domain","range","_getSvgWidth","scaleSequential","t","saturation","lightness","hue","hsl","toString","amountOfDataSets","size","width","_getMaxRowLabelWidth","step","maxRowLabelWidth","getBBox","maxColLabelHeight","height","_getMaxColumnLabelHeight","bandWidth","Math","floor","_alignCell","_resizeCell","left","amountOfCols","keys","colHeight","style","cell","dimensions","number","offset","headers","col","colHeads","rowElement","rowData","filteredData","cells","value","on","_mouseOverHandler","call","_mouseOutHandler","selector","match","nodeName","toLowerCase","matches","parentNode","child","index","previousSibling","y","getBoundingClientRect","top","x","parseInt","_mouseOverRect","fill","toFixed","_getParentElement","classed","colIndex","_getChildNodeIndex","currentCol","filter","window","infect"],"mappings":"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","file":"resistency-matrix-old.es2015.js","sourcesContent":["(() => {\n\n\t/* global d3, window */\n\n\t/**\n\t* Draws a matrix with resistencies. \n\t* Rows: Anti biotics\n\t* Cols: Bacteria\n\t* Cells: Colored according to resistency\n\t*/\n\tclass ResistencyMatrix {\n\n\t\tconstructor(container, data) {\n\n\t\t\tif (!container) {\n\t\t\t\tthrow new Error('ResistencyMatrix: At least one argument (container) is needed in constructor.');\n\t\t\t}\n\n\t\t\tthis._container \t= container;\n\t\t\tthis._data \t\t\t= data;\n\n\t\t\tthis._configuration\t= {\n\t\t\t\tspaceBetweenLabelsAndMatrix\t\t: 20\n\t\t\t\t, lineWeight\t\t\t\t\t: 5\n\t\t\t};\n\n\t\t\t// Holds references\n\t\t\tthis._elements\t\t= {};\n\n\t\t\t// Create SVG\n\t\t\tthis._elements.svg = this._createSVG();\n\n\t\t\t// If all required data is available, draw matrix\n\t\t\tif (this._container && this._data) this.drawMatrix();\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Updates the matrix' data\n\t\t* @param {Array} data\t\t\t\tArray (rows) of Arrays (cols) which hold the values (Object)\n\t\t* @param {String} fieldName\t\t\tValues are passed in an object; name of the key that holds the\n\t\t*\t\t\t\t\t\t\t\t\tdata which should be displayed in table.\n\t\t*/\n\t\tupdateData(data, keyName, dontUpdateScale) {\n\n\t\t\tthis._data = data;\n\t\t\tconsole.log('ResistencyMatrix / updateData: Update scale? %o. Update data to %o', !dontUpdateScale, data);\n\t\t\tthis._keyName = keyName;\n\t\t\tif (this._container && this._data) this.drawMatrix(dontUpdateScale);\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Main method. Draws the matrix with data and container provided.\n\t\t*/\n\t\tdrawMatrix(dontUpdateScale) {\n\n\t\t\t// Get row scale\n\t\t\tif (!dontUpdateScale) {\n\t\t\t\tthis._columnScale = this._createColumnScale();\n\t\t\t\tthis._colorScale = this._createColorScale();\n\t\t\t}\n\n\t\t\tthis._drawRows(this._columnScale.bandwidth());\n\t\t\tthis._drawColumnHeads();\n\n\t\t\tif (!dontUpdateScale) {\n\t\t\t\tthis._updateColumnScale();\n\t\t\t}\n\n\t\t\tthis._updatePositionsAndSizes();\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Draws the rows\n\t\t* @param {Number} rowHeight\t\t\tWidth of a single row\n\t\t*/\n\t\t_drawRows(rowHeight) {\n\n\t\t\tconsole.log('ResistencyMatrix / _drawRows: Draw rows with data %o and height %o', Object.values(this._data), rowHeight);\n\n\t\t\t// Reference to this, needed for each\n\t\t\tconst self = this;\n\n\t\t\t// g\n\t\t\tconst rows = this._elements.svg\n\t\t\t\t.selectAll('.row')\n\t\t\t\t// http://stackoverflow.com/questions/22240842/d3-update-on-node-removal-always-remove-the-last-entry-in-svg-dom\n\t\t\t\t.data(this._data, (bacterium) => bacterium.id);\n\n\t\t\tconst enteredRows = rows\n\t\t\t\t.enter()\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.attr('class', 'row')\n\t\t\t\t\t.attr('transform', (d, i) => `translate(0, ${i * rowHeight})`)\n\t\t\t\t\t// Cannot use arrow functions as we need this\n\t\t\t\t\t.each(function(row) {\n\t\t\t\t\t\tself._drawCell(this, row, rowHeight);\n\t\t\t\t\t});\n\n\t\t\tenteredRows\n\t\t\t\t.enter()\n\t\t\t\t.append('text')\n\t\t\t\t.each(() => {\n\t\t\t\t\tconsole.error('create row');\n\t\t\t\t})\n\t\t\t\t.text('test');\n\n\t\t\tself._createSingleRowLabel(enteredRows);\n\n\t\t\trows\n\t\t\t\t.exit()\n\t\t\t\t.each(() => {\n\t\t\t\t\tconsole.error('rm rw', this);\n\t\t\t\t})\n\t\t\t\t.remove();\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns the SVG's width \n\t\t* @return {Number}\n\t\t*/\n\t\t_getSvgWidth() {\n\t\t\treturn this._elements.svg.property('clientWidth');\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates and returns a single row label. Needed to first measure and then\n\t\t* draw it at the right place\n\t\t*/\n\t\t_createSingleRowLabel(element) {\n\t\t\treturn element\n\t\t\t\t.append('text')\n\t\t\t\t.attr('class', 'label')\n\t\t\t\t.attr('text-anchor', 'end')\n\t\t\t\t.text((d) => {\n\t\t\t\t\treturn d.bacterium.latinName;\n\t\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t* Creates and returns the SVG\n\t\t*/\n\t\t_createSVG() {\n\t\t\treturn d3.select(this._container)\n\t\t\t\t.append('svg');\n\t\t}\n\n\n\t\t/**\n\t\t* Creates the scale for all columns, i.e. for all the vertical entities – row data\n\t\t* must be taken. This is done before the labels are there, therefore\n\t\t* take the whole SVG width.\n\t\t*/\n\t\t_createColumnScale() {\n\n\t\t\tconst data = this._data[0].antibiotics.map((item) => item.antibiotic.name);\n\t\t\tconsole.log('ResistencyMatrix: Data for column scale (len %o) is %o', data.length, data);\n\t\t\treturn d3.scaleBand()\n\t\t\t\t.domain(data)\n\t\t\t\t// -50: We turn the col labels by 45°, this takes a bit of space\n\t\t\t\t.range([0, this._getSvgWidth() - 50]);\n\n\t\t}\n\n\n\t\t/**\n\t\t* Returns the scale for coloring the cells\n\t\t*/\n\t\t_createColorScale() {\n\t\t\treturn new d3.scaleSequential((t) => {\n\t\t\t\t//const saturation = t * 0.2 + 0.4; // 50–60%\n\t\t\t\tconst saturation = 0.7;\n\t\t\t\tconst lightness = (1 - t) * 0.6 + 0.4; // 30–80%\n\t\t\t\t//const lightness = 0.5;\n\t\t\t\t// Hue needs values between 40 and 90\n\t\t\t\tconst hue = t * 100;\n\t\t\t\t//console.warn(t.toFixed(3), hue.toFixed(3), saturation.toFixed(3), lightness.toFixed(3));\n\t\t\t\tconst hsl = d3.hsl(hue, saturation, lightness);\n\t\t\t\treturn hsl.toString();\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t* Updates the col scale. Is called after labels were drawn and measured. Scale should take up\n\t\t* all horizontal space that's left. \n\t\t*/\n\t\t_updateColumnScale() {\n\n\t\t\t// Remove amount of entries so that we can insert a line of 1 px\n\t\t\tconst amountOfDataSets = this._elements.svg.selectAll('.column').size();\n\t\t\tconst width = this._getSvgWidth() - 50 - this._getMaxRowLabelWidth() - this._configuration.spaceBetweenLabelsAndMatrix - amountOfDataSets * this._configuration.lineWeight;\n\t\t\tconsole.log('ResistencyMatrix / _updateColumnScale: Col # is %o, svg width is %o, width column content is %o', amountOfDataSets, this._getSvgWidth(), width);\n\n\t\t\t// Update scale\n\t\t\tthis._columnScale.range([0, width]);\n\t\t\tconsole.log('ResistencyMatrix: New bandwidth is %o, step is %o', this._columnScale.bandwidth(), this._columnScale.step());\n\n\t\t}\n\n\n\t\t/**\n\t\t* Returns width of widest row label\n\t\t*/\n\t\t_getMaxRowLabelWidth() {\n\n\t\t\tif (!this._elements.svg.selectAll('.row')) return 0;\n\n\t\t\tlet maxRowLabelWidth = 0;\n\t\t\tthis._elements.svg.selectAll('.row').select('.label').each(function(){\n\t\t\t\tconst width = this.getBBox().width;\n\t\t\t\tif (width > maxRowLabelWidth) maxRowLabelWidth = width;\n\t\t\t});\n\t\t\treturn maxRowLabelWidth;\n\n\t\t}\n\n\n\t\t/**\n\t\t* Returns width of widest column label\n\t\t*/\n\t\t_getMaxColumnLabelHeight() {\n\t\t\tlet maxColLabelHeight = 0;\n\t\t\tthis._elements.svg.selectAll('.column').select('.label').each(function() {\n\t\t\t\tconst height = this.getBBox().width;\n\t\t\t\tif (height > maxColLabelHeight) maxColLabelHeight = height;\n\t\t\t});\n\t\t\treturn maxColLabelHeight;\n\t\t}\n\n\n\t\t/**\n\t\t* Updates the scales after the labels (row/col) were drawn and updates cells/rows to \n\t\t* respect width/height of the labels.\n\t\t* Resets height of the SVG to match its contents.\n\t\t*/\n\t\t_updatePositionsAndSizes() {\n\n\t\t\tconst self = this;\n\n\t\t\tconst maxRowLabelWidth = this._getMaxRowLabelWidth()\n\t\t\t\t, maxColLabelHeight = this._getMaxColumnLabelHeight();\n\n\t\t\tconst bandWidth \t= this._columnScale.bandwidth()\n\t\t\t\t, step\t\t\t=this._columnScale.step();\n\n\t\t\tconsole.log('ResistencyMatrix / _updatePositionsAndSizes: maxRowLabelWidth', maxRowLabelWidth, 'collabelheight', maxColLabelHeight, 'bandWidth', bandWidth);\n\n\t\t\t// Update rows\n\t\t\tthis._elements.svg\n\t\t\t\t.selectAll('.row')\n\t\t\t\t.each(function(d,i){\n\t\t\t\t\td3.select(this)\n\t\t\t\t\t\t.attr('height', bandWidth)\n\t\t\t\t\t\t.attr('transform', `translate(0, ${ i * Math.floor( bandWidth ) + Math.floor( maxColLabelHeight ) + self._configuration.spaceBetweenLabelsAndMatrix + i * self._configuration.lineWeight })`);\n\t\t\t\t});\n\n\n\t\t\t// Update cell's rectangles\n\t\t\tthis._elements.svg\n\t\t\t\t.selectAll('.row')\n\t\t\t\t.selectAll('.cell')\n\t\t\t\t.each(function(d, i) {\n\t\t\t\t\tself._alignCell(this, Math.floor(self._columnScale.bandwidth()), i, Math.floor(maxRowLabelWidth + self._configuration.spaceBetweenLabelsAndMatrix), self._configuration.lineWeight);\n\t\t\t\t})\n\t\t\t\t.select('rect')\n\t\t\t\t.each(function() {\n\t\t\t\t\tself._resizeCell(this, Math.floor(self._columnScale.bandwidth()));\n\t\t\t\t});\n\n\t\t\t// Update cols\n\t\t\t//this._elements.columns\n\t\t\tthis._elements.svg\n\t\t\t\t.selectAll('.column')\n\t\t\t\t.each(function(d,i) {\n\t\t\t\t\t// step / 2: Make sure we're kinda centered over the col\n\t\t\t\t\tconst left = i * (Math.floor(step) + self._configuration.lineWeight) + maxRowLabelWidth + self._configuration.spaceBetweenLabelsAndMatrix + step / 2;\n\t\t\t\t\td3.select(this)\n\t\t\t\t\t\t.attr('transform', `translate(${ left }, ${ maxColLabelHeight })`);\n\t\t\t\t});\n\n\t\t\t// Update label's x position\n\t\t\tthis._elements.svg\n\t\t\t\t.selectAll('.row')\n\t\t\t\t.select('.label')\n\t\t\t\t.attr('x', maxRowLabelWidth)\n\t\t\t\t.each(function() {\n\t\t\t\t\td3.select(this)\n\t\t\t\t\t\t.attr('y', bandWidth / 2 + this.getBBox().height / 2);\n\t\t\t\t});\n\n\t\t\t// Update col label's y position\n\t\t\t//this._elements.columns\n\t\t\t//\t.select('.label')\n\t\t\t//\t.attr('transform', 'rotate(-45)');\n\n\t\t\t// Update svg height\n\t\t\tconst amountOfCols = ( Object.keys(this._data).length )\n\t\t\t\t, colHeight = this._columnScale.step();\n\t\t\tthis._container.style.height = (this._getMaxColumnLabelHeight() + (colHeight + this._configuration.lineWeight) * amountOfCols + this._configuration.spaceBetweenLabelsAndMatrix) + 'px';\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Aligns a single cell\n\t\t*/\n\t\t_alignCell(cell, dimensions, number, offset = 0, lineWeight = 1) {\n\t\t\td3.select(cell)\n\t\t\t\t// + number: Space 1 px between cells\n\t\t\t\t.attr('transform', `translate(${ offset + number * dimensions + number * lineWeight },0)`);\n\t\t}\n\n\n\t\t/**\n\t\t* Resizes a single cell\n\t\t*/ \n\t\t_resizeCell(cell, dimensions) {\n\t\t\td3.select(cell)\n\t\t\t\t.attr('height', dimensions)\n\t\t\t\t.attr('width', dimensions);\n\t\t}\n\n\n\t\t/**\n\t\t* Draws the column heads, then returns the created elements\n\t\t*/\n\t\t_drawColumnHeads() {\n\n\t\t\t// Get headers from data (keys of first array item)\n\t\t\tconst headers = this._data[0].antibiotics.map((col) => col.antibiotic);\n\t\t\tconsole.log('ResistencyMatrix / _drawColumnHeads: Headers are %o', headers);\n\n\t\t\t// <g> and transform\n\t\t\tconst colHeads = this._elements.svg\n\t\t\t\t.selectAll('.column')\n\t\t\t\t.data(headers, (col) => {\n\t\t\t\t\treturn col.id;\n\t\t\t\t});\n\n\t\t\t// Draw heads, consisting of <g> with contained <text>\n\t\t\tcolHeads\n\t\t\t\t.enter()\n\t\t\t\t\t.append('g')\n\t\t\t\t\t// translation will be done in this.updatePositionsAndSizes\n\t\t\t\t\t.attr('class', 'column')\n\t\t\t\t\t.append('text')\n\t\t\t\t\t\t.attr('class', 'label')\n\t\t\t\t\t\t.attr('text-anchor', 'start')\n\t\t\t\t\t\t.attr('transform', 'rotate(-45)')\n\t\t\t\t\t\t.text(d => d.name);\n\n\n\t\t\t// Text\n\t\t\tcolHeads\n\t\t\t\t.exit()\n\t\t\t\t.each(() => {\n\t\t\t\t\tconsole.error('rm cl hd');\n\t\t\t\t})\n\t\t\t\t.remove();\n\n\t\t}\n\n\n\t\t/**\n\t\t* Draws a single resistency cell\n\t\t*/\n\t\t_drawCell(rowElement, rowData, dimensions) {\n\n\t\t\t//console.log( 'ResistencyMatrix / _drawCell: row %o, data %o, dimensions %o', rowElement, rowData, dimensions );\n\t\t\tconst self = this;\n\n\t\t\t// Remove 'name' property on row object\n\t\t\tconst filteredData = rowData.antibiotics;\n\t\t\t//console.error('drawCell: %o', filteredData);\n\n\t\t\t// <g>\n\t\t\tconst cells = d3.select(rowElement)\n\t\t\t\t.selectAll('.cell')\n\t\t\t\t.data(filteredData, (col) => {\n\t\t\t\t\t//console.error(col.antibiotic.id);\n\t\t\t\t\treturn col.antibiotic.id;\n\t\t\t\t});\n\n\t\t\tcells\n\t\t\t\t.enter()\n\t\t\t\t.append('g')\n\t\t\t\t.attr('class', 'cell')\n\t\t\t\t// Rect\n\t\t\t\t.each(function(d) {\n\t\t\t\t\td3.select(this)\n\t\t\t\t\t\t.append('rect')\n\t\t\t\t\t\t.style('fill', d ? self._colorScale(d.value) : '#fff')\n\t\t\t\t\t\t.style('stroke', d.value === null ? '#dedede' : '')\n\t\t\t\t\t\t.style('stroke-width', d.value === null ? 1 : 0)\n\t\t\t\t\t\t// Set size of rect\n\t\t\t\t\t\t.each(function() {\n\t\t\t\t\t\t\tself._resizeCell(this,dimensions);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.on('mouseenter', function(d) {\n\t\t\t\t\t\t\tconst element = this;\n\t\t\t\t\t\t\tself._mouseOverHandler.call(self, element, d);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.on('mouseleave', function() {\n\t\t\t\t\t\t\tconst element = this;\n\t\t\t\t\t\t\tself._mouseOutHandler.call(self, element);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\n\n\t\t\tcells\n\t\t\t\t.exit()\n\t\t\t\t.each(() => {\n\t\t\t\t\tconsole.error('rm cell');\n\t\t\t\t})\n\t\t\t\t.remove();\n\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Returns the first parent of element that matches selector\n\t\t*/\n\t\t_getParentElement(element, selector) {\n\n\t\t\tlet match;\n\t\t\twhile(element.nodeName.toLowerCase() !== 'svg') {\n\t\t\t\tif (element.matches(selector)) {\n\t\t\t\t\tmatch = element;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telement = element.parentNode;\n\t\t\t}\n\n\t\t\treturn match;\n\n\t\t}\n\n\t\t/**\n\t\t* Returns index of current child that matches selector in its parent\n\t\t*/\n\t\t_getChildNodeIndex(child, selector) {\n\n\t\t\tlet index = 0;\n\t\t\twhile(child.previousSibling) {\n\t\t\t\tif (child.previousSibling.matches(selector)) index++;\n\t\t\t\tchild = child.previousSibling;\n\t\t\t}\n\t\t\treturn index;\n\n\t\t}\n\n\n\t\t/**\n\t\t* Handles mouseenter on a cell\n\t\t*/\n\t\t_mouseOverHandler(element, data) {\n\n\t\t\t// Data not available: Cell has no value. There's no \n\t\t\t// hover effect for empty cells.\n\t\t\tif (!data.value) return;\n\n\t\t\t// Map svg's DOM element to svg\n\t\t\tlet svg;\n\t\t\tthis._elements.svg.each(function() { svg = this; });\n\n\t\t\tconst y\t\t\t= element.getBoundingClientRect().top - svg.getBoundingClientRect().top\n\t\t\t\t, x\t\t\t= element.getBoundingClientRect().left - svg.getBoundingClientRect().left\n\t\t\t\t, width\t\t= parseInt(d3.select(element).attr('width'), 10) + 40\n\t\t\t\t, height\t= parseInt(d3.select(element).attr('height'), 10) + 40;\n\n\t\t\tthis._mouseOverRect = this._elements.svg\n\t\t\t\t.append('g');\n\n\t\t\tthis._mouseOverRect\n\t\t\t\t.append('rect')\n\t\t\t\t.attr('x', x - 20)\n\t\t\t\t.attr('y', y - 20)\n\t\t\t\t.attr('class', 'hover-cell')\n\t\t\t\t.style('fill', element.style.fill)\n\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t.attr('height', height)\n\t\t\t\t.attr('width', width)\n\t\t\t\t.style('pointer-events', 'none');\n\t\t\t\t//.style('opacity', 0.9);\n\t\t\t\n\t\t\tthis._mouseOverRect\n\t\t\t\t.append('text')\n\t\t\t\t.text(data.value.toFixed(2))\n\t\t\t\t.style('color', 'black')\n\t\t\t\t.style('font-size', '20px')\n\t\t\t\t.style('text-align', 'center')\n\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t.attr('x', x - 10)\n\t\t\t\t.attr('y', y + 20);\n\n\t\t\t/*this._mouseOverRect.select('text').each(function() {\n\t\t\t\t//const bbox = this.getBBox();\n\t\t\t});\n\t\t\t\n\t\t\tthis._mouseOverRect.each(function() {\n\t\t\t\tconsole.error(this.querySelector('rect'));\n\t\t\t});*/\n\n\t\t\t// Highlight row\n\t\t\tconst row = this._getParentElement(element, '.row');\n\t\t\td3.select(row).classed('active',true);\n\n\t\t\t// Highlight col\n\t\t\tconst cell = this._getParentElement(element, '.cell');\n\t\t\tconst colIndex = this._getChildNodeIndex(cell, '.cell');\n\t\t\tconst currentCol = this._elements.svg.selectAll('.column').filter((d,i) => i === colIndex);\n\t\t\tcurrentCol.classed('active', true);\n\n\t\t}\n\n\t\t_mouseOutHandler() {\n\n\t\t\tif (this._mouseOverRect) this._mouseOverRect.remove();\n\n\t\t\tthis._elements.svg.selectAll('.row').classed('active', false);\n\t\t\tthis._elements.svg.selectAll('.column').classed('active', false);\n\n\t\t}\n\n\t}\n\n\twindow.infect = window.infect || {};\n\twindow.infect.ResistencyMatrix = ResistencyMatrix;\n\n})();\n\n"]}
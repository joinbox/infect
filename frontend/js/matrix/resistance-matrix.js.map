{"version":3,"sources":["js/matrix/resistance-matrix.es2015.js"],"names":["ResistanceMatrix","container","data","config","Error","_container","_data","_configuration","spaceBetweenLabelsAndMatrix","transitionDuration","paddingRatio","colorValue","cellLabelValue","rowLabelValue","columnLabelValue","columnHeaderTransformer","item","columnHeaderIdentifier","rowIdentifier","rowDataTransformer","rowHidden","_elements","_isInitialRendering","svg","_createSVG","drawMatrix","console","log","dontUpdateScale","_columnScale","_createColumnScale","_colorScale","_createColorScale","_drawColumnHeads","_drawRows","_updateColumnScale","attr","_getMaxColumnLabelHeight","step","length","scale","self","Object","values","bandwidth","rows","selectAll","call","d","error","size","enteredRows","enter","append","exit","remove","_createSingleRowLabel","merge","_getMaxRowLabelWidth","getBBox","height","numberOfVisibleRows","transition","duration","translation","style","parent","_drawCell","property","element","text","d3","select","scaleBand","rangeRound","_getSvgWidth","domain","map","paddingInner","scaleSequential","t","invertedT","saturation","lightness","hue","hsl","toString","availableWidth","maxRowLabelWidth","each","Math","max","width","ceil","maxColLabelHeight","headers","colHeads","colHeadsEnter","currentIndex","round","hidden","row","cells","gs","_drawCellRectangle","_drawCellLabel","currentRowIndex","i","labelValue","on","_mouseOverHandler","_mouseOutHandler","selector","match","nodeName","toLowerCase","matches","parentNode","child","index","previousSibling","label","y","getBoundingClientRect","top","x","left","parseInt","_mouseOverRect","fill","_getParentElement","classed","cell","colIndex","_getChildNodeIndex","currentCol","filter","window","infect"],"mappings":"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","file":"resistance-matrix.es2015.js","sourcesContent":["(() => {\n\n\t/* global d3, window */\n\n\t/**\n\t* Draws a matrix with resistencies. \n\t* Rows: Anti biotics\n\t* Cols: Bacteria\n\t* Cells: Colored according to resistance\n\t*/\n\tclass ResistanceMatrix {\n\n\t\t/**\n\t\t* @param {HTMLElement} container\n\t\t* @param {Array} data\t\t\t\tData to be displayed must be a 2-d array where the values of the 2nd dimension array\n\t\t*\t\t\t\t\t\t\t\t\tare objects, e.g. [[{bacterium: {name: 'bact-0'}, antibiotic: {name: 'ab-0'}, resistance: 0.5}]]\n\t\t* @param {Object} config\t\t\tContains the config with the following properties: \n\t\t*\t\t\t\t\t\t\t\t\t- colorValue: Function that returns the cell's color value (from the cell's object)\n\t\t* \t\t\t\t\t\t\t\t\t- cellLabelValue: Function that returns the cell label's value (from the cell's object)\n\t\t*\t\t\t\t\t\t\t\t\t- columnHeaderTransformer: transformation-function that takes the whole data and returns array relevant for\n\t\t*\t\t\t\t\t\t\t\t\t  column headers\n\t\t*\t\t\t\t\t\t\t\t\t- columnHeaderIdentifier: Function that returns id for the col header (from columnHeaderTransformer)\n\t\t*\t\t\t\t\t\t\t\t\t- columnLabelValue: Function that returns the column label's value (from the columnHeaderTransformer array)\n\t\t*\t\t\t\t\t\t\t\t\t- rowLabelValue: Function that returns the row label's value (from the cell's array)\n\t\t* \t\t\t\t\t\t\t\t\t- spaceBetweenLabelsAndMatrix: Space between label and matrix in px\n\t\t*\t\t\t\t\t\t\t\t\t- paddingRatio: Line weight (in % of the cells)\n\t\t*/\n\t\tconstructor(container, data, config = {}) {\n\n\t\t\tif (!container) {\n\t\t\t\tthrow new Error('ResistanceMatrix: At least one argument (container) is needed in constructor.');\n\t\t\t}\n\n\t\t\tthis._container \t= container;\n\t\t\tthis._data \t\t\t= data;\n\n\n\t\t\tthis._configuration\t= {\n\t\t\t\tspaceBetweenLabelsAndMatrix\t\t: config.spaceBetweenLabelsAndMatrix || 20\n\t\t\t\t, transitionDuration\t\t\t: config.transitionDuration || 900\n\t\t\t\t, paddingRatio\t\t\t\t\t: config.paddingRatio || 0.2\n\t\t\t\t, colorValue\t\t\t\t\t: config.colorValue || (() => 1)\n\t\t\t\t, cellLabelValue\t\t\t\t: config.cellLabelValue || (() => '–')\n\t\t\t\t, rowLabelValue\t\t\t\t\t: config.rowLabelValue || (() => 'n/a')\n\t\t\t\t, columnLabelValue\t\t\t\t: config.columnLabelValue || (() => 'n/a')\n\t\t\t\t, columnHeaderTransformer\t\t: config.columnHeaderTransformer || ((item) => item)\n\t\t\t\t, columnHeaderIdentifier\t\t: config.columnHeaderIdentifier || ((item) => item)\n\t\t\t\t, rowIdentifier\t\t\t\t\t: config.rowIdentifier || ((item) => item)\n\t\t\t\t, rowDataTransformer\t\t\t: config.rowDataTransformer || ((item) => item)\n\t\t\t\t, rowHidden\t\t\t\t\t\t: config.rowHidden || false\n\t\t\t};\n\n\t\t\t// Holds references\n\t\t\tthis._elements\t\t= {};\n\t\t\tthis._isInitialRendering = true;\n\n\t\t\t// Create SVG\n\t\t\tthis._elements.svg = this._createSVG();\n\n\t\t\t// If all required data is available, draw matrix\n\t\t\tif (this._container && this._data) this.drawMatrix();\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Updates the matrix' data\n\t\t* @param {Array} data\t\t\t\tArray (rows) of Arrays (cols) which hold the values (Object)\n\t\t*/\n\t\tupdateData(data) {\n\n\t\t\tthis._data = data;\n\t\t\tconsole.log('ResistanceMatrix: Update data to %o', data);\n\t\t\tif (this._container && this._data) this.drawMatrix(true);\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Main method. Draws the matrix with data and container provided.\n\t\t*/\n\t\tdrawMatrix(dontUpdateScale) {\n\n\t\t\t// Create scales if we want them to be updated (which we don't when elements are removed or added\n\t\t\t// as this will enlarge/reduce the cell's size)\n\t\t\tif (!dontUpdateScale) {\n\t\t\t\tthis._columnScale = this._createColumnScale();\n\t\t\t\tthis._colorScale = this._createColorScale();\n\t\t\t}\n\n\t\t\t// Draw column heads and rows (incl. labels and cells) – this is the very\n\t\t\t// basic setup.\n\t\t\tthis._drawColumnHeads(this._columnScale);\n\t\t\tthis._drawRows(this._columnScale);\n\n\t\t\t// Update column scale to account for labels (row/col) which take up\n\t\t\t// space\n\t\t\tif (!dontUpdateScale) {\n\t\t\t\tthis._updateColumnScale();\n\t\t\t}\n\n\t\t\t// Set height of the whole SVG\n\t\t\t//console.error(this._getMaxColumnLabelHeight(), this._configuration.spaceBetweenLabelsAndMatrix, this._data.length, this._columnScale.step(), this._columnScale.bandwidth());\n\t\t\t// Why step() + 4? IDK. It just works. If we only use step(), step seems to be too small.\n\t\t\tthis._elements.svg.attr('height', this._getMaxColumnLabelHeight() + this._configuration.spaceBetweenLabelsAndMatrix + (this._columnScale.step() + 4) * this._data.length);\n\n\t\t\t// When rendering is initial, update rows and columns to account for new scale\n\t\t\t// that now respects labels\n\t\t\tif(this._isInitialRendering) {\n\t\t\t\tthis._drawRows(this._columnScale);\n\t\t\t\tthis._drawColumnHeads(this._columnScale);\n\t\t\t}\n\n\t\t\tthis._isInitialRendering = false;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Draws the rows\n\t\t* @param {Number} rowHeight\t\t\tWidth of a single row\n\t\t*/\n\t\t_drawRows(scale) {\n\n\t\t\tconst self = this;\n\n\t\t\tconsole.log('ResistanceMatrix / _drawRows: Draw rows with data %o and height %o', Object.values(this._data), scale.bandwidth());\n\n\t\t\t// g\n\t\t\tconst rows = this._elements.svg\n\t\t\t\t.selectAll('.row')\n\t\t\t\t.call((d) => {\n\t\t\t\t\tconsole.error('updated rows', d.size());\n\t\t\t\t})\n\t\t\t\t// http://stackoverflow.com/questions/22240842/d3-update-on-node-removal-always-remove-the-last-entry-in-svg-dom\n\t\t\t\t.data(this._data, this._configuration.rowIdentifier);\n\t\t\t\t\n\n\t\t\t// Enter\n\t\t\tconst enteredRows = rows\n\t\t\t\t.enter()\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.attr('class', 'row');\n\n\n\t\t\t// Exit\n\t\t\trows\n\t\t\t\t.exit()\n\t\t\t\t.remove();\n\n\n\n\t\t\t// Label (enter and update), before cells\n\t\t\tthis._createSingleRowLabel(enteredRows);\n\n\n\t\t\t// Update and enter: \n\t\t\t// Adjust LABEL position\n\t\t\tenteredRows\n\t\t\t\t.merge(rows)\n\t\t\t\t.selectAll('.row-label')\n\t\t\t\t.attr('transform', function() {\n\t\t\t\t\treturn `translate(${ self._getMaxRowLabelWidth() }, ${ this.getBBox().height / 2 - 4 })`;\n\t\t\t\t});\n\n\n\n\t\t\t// Enter and update:\n\t\t\t// - move down\n\t\t\t// - animates transformation\n\t\t\tlet numberOfVisibleRows = 0;\n\t\t\tenteredRows\n\t\t\t\t.call((d) => console.error('new rows', d.size() ))\n\t\t\t\t.merge(rows)\n\t\t\t\t.transition()\n\t\t\t\t.duration(this._configuration.transitionDuration)\n\t\t\t\t.attr('transform', (d) => {\n\t\t\t\t\tconst translation =  `translate(0, ${ this._getMaxColumnLabelHeight() + this._configuration.spaceBetweenLabelsAndMatrix + numberOfVisibleRows * scale.step() })`;\n\t\t\t\t\tif (!this._configuration.rowHidden(d)) numberOfVisibleRows++;\n\t\t\t\t\treturn translation;\n\t\t\t\t})\n\t\t\t\t.style('opacity', (d) => this._configuration.rowHidden(d) ? 0 : 1);\n\n\n\t\t\t// Draw cells\n\t\t\tenteredRows\n\t\t\t\t.merge(rows)\n\t\t\t\t.call((parent) => {\n\t\t\t\t\tthis._drawCell(parent, scale);\n\t\t\t\t});\n\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns the SVG's width \n\t\t* @return {Number}\n\t\t*/\n\t\t_getSvgWidth() {\n\t\t\treturn this._elements.svg.property('clientWidth');\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates and returns a single row label. Needed to first measure and then\n\t\t* draw it at the right place\n\t\t*/\n\t\t_createSingleRowLabel(element) {\n\n\t\t\treturn element\n\t\t\t\t.append('text')\n\t\t\t\t.attr('class', 'row-label')\n\t\t\t\t.attr('text-anchor', 'end')\n\t\t\t\t.text(this._configuration.rowLabelValue);\n\n\t\t}\n\n\n\t\t/**\n\t\t* Creates and returns the SVG\n\t\t*/\n\t\t_createSVG() {\n\t\t\treturn d3.select(this._container)\n\t\t\t\t.append('svg');\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates the scale for all columns, i.e. for all the vertical entities – row data\n\t\t* must be taken. This is done before the labels are there, therefore take the whole\n\t\t* SVG width. The scale's range will later be updated through _updateColumnScale\n\t\t*/\n\t\t_createColumnScale() { \n\n\t\t\tconst data = this._configuration.columnHeaderTransformer(this._data);\n\t\t\tconsole.log('ResistanceMatrix: Data for column scale (len %o) is %o', data.length, data);\n\t\t\tconst scale = d3.scaleBand()\n\t\t\t\t// -50: We turn the col labels by 45°, this takes a bit of space\n\t\t\t\t.rangeRound([0, this._getSvgWidth() - 50])\n\t\t\t\t// Domain: Array of object fucks things up (only has 1 entry) – use Array of strings\n\t\t\t\t.domain(data.map(this._configuration.columnHeaderIdentifier))\n\t\t\t\t.paddingInner(this._configuration.paddingRatio);\n\t\t\tconsole.log('ResistanceMatrix: Column scale bandwidth is %o', scale.bandwidth());\n\t\t\treturn scale;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns the scale for coloring the cells\n\t\t*/\n\t\t_createColorScale() {\n\t\t\treturn new d3.scaleSequential((t) => {\n\t\t\t\t// Saturation: 40–90%\n\t\t\t\tconst invertedT = 1 + (t * -1);\n\t\t\t\tconst saturation = invertedT * 0.5 + 0.4;\n\t\t\t\t// Lightness: 60–100% – this is very important\n\t\t\t\tconst lightness = (1 - invertedT) * 0.6 + 0.4;\n\t\t\t\t// Hue 0-100\n\t\t\t\tconst hue = invertedT * 100;\n\t\t\t\tconst hsl = d3.hsl(hue, saturation, lightness);\n\t\t\t\treturn hsl.toString();\n\t\t\t});\n\t\t}\n\n\n\n\t\t/**\n\t\t* Updates the col scale. Is called after labels were drawn and measured. Scale should take up\n\t\t* all horizontal space that's left. \n\t\t*/\n\t\t_updateColumnScale() {\n\n\t\t\t// 50: Just some security margin\n\t\t\tconst availableWidth = this._getSvgWidth() - 50 - this._getMaxRowLabelWidth() - this._configuration.spaceBetweenLabelsAndMatrix;\n\t\t\tconsole.log('ResistanceMatrix / _updateColumnScale: SVG width is %o, width column content is %o', this._getSvgWidth(), availableWidth);\n\n\t\t\t// Update scale\n\t\t\tthis._columnScale.rangeRound([0, availableWidth]);\n\t\t\tconsole.log('ResistanceMatrix: New bandwidth is %o, step is %o', this._columnScale.bandwidth(), this._columnScale.step());\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns width of widest row label\n\t\t*/\n\t\t_getMaxRowLabelWidth() {\n\n\t\t\tif (!this._elements.svg.selectAll('.row')) return 0;\n\n\t\t\tlet maxRowLabelWidth = 0;\n\t\t\tthis._elements.svg.selectAll('.row').select('.row-label').each(function(){\n\t\t\t\tmaxRowLabelWidth = Math.max(maxRowLabelWidth, this.getBBox().width);\n\t\t\t});\n\t\t\treturn Math.ceil(maxRowLabelWidth);\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns width of widest column label\n\t\t*/\n\t\t_getMaxColumnLabelHeight() {\n\t\t\tlet maxColLabelHeight = 0;\n\t\t\tthis._elements.svg.selectAll('.column').select('.column-label').each(function() {\n\t\t\t\tmaxColLabelHeight = Math.max(maxColLabelHeight, this.getBBox().width);\n\t\t\t});\n\t\t\treturn Math.ceil(maxColLabelHeight);\n\t\t}\n\n\n\n\n\n\n\n\t\t/**\n\t\t* Draws the column heads, then returns the created elements\n\t\t*/\n\t\t_drawColumnHeads(scale) {\n\n\t\t\tconst self = this;\n\n\t\t\t// Get headers from data (keys of first array item)\n\t\t\tconst headers = this._configuration.columnHeaderTransformer(this._data);\n\t\t\tconsole.log('ResistanceMatrix / _drawColumnHeads: Headers are %o', headers);\n\n\t\t\t// <g> and transform\n\t\t\tconst colHeads = this._elements.svg\n\t\t\t\t.selectAll('.column')\n\t\t\t\t.data(headers, this._configuration.columnHeaderIdentifier);\n\n\t\t\t// Draw heads, consisting of <g> with contained <text>\n\t\t\tconst colHeadsEnter = colHeads\n\t\t\t\t.enter()\n\t\t\t\t\t.append('g')\n\t\t\t\t\t// translation will be done in this.updatePositionsAndSizes\n\t\t\t\t\t.attr('class', 'column');\n\n\t\t\t// Append text. Rotate by 45°\n\t\t\tcolHeadsEnter\n\t\t\t\t\t.append('text')\n\t\t\t\t\t\t.attr('class', 'column-label')\n\t\t\t\t\t\t.attr('text-anchor', 'start')\n\t\t\t\t\t\t.attr('transform', 'rotate(-45)')\n\t\t\t\t\t\t.text(this._configuration.columnLabelValue);\n\n\n\t\t\t// Update position\n\t\t\t// (enter and update)\n\t\t\tlet currentIndex = 0;\n\t\t\tcolHeadsEnter\n\t\t\t\t.merge(colHeads)\n\t\t\t\t.transition()\n\t\t\t\t.duration(this._configuration.transitionDuration)\n\t\t\t\t.attr('transform', function(d) {\n\t\t\t\t\tconst translation = `translate(${ currentIndex * scale.step() + self._getMaxRowLabelWidth() + self._configuration.spaceBetweenLabelsAndMatrix + Math.round(scale.step() / 2 - 8) }, ${ self._getMaxColumnLabelHeight() })`;\n\t\t\t\t\tif (!d.hidden) currentIndex++;\n\t\t\t\t\treturn translation;\n\t\t\t\t})\n\t\t\t\t.style('opacity', (d) => d.hidden ? 0 : 1);\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Draws a single resistance cell\n\t\t*/\n\t\t_drawCell(row, scale) {\n\n\t\t\tconsole.log('ResistanceMatrix: Draw cell; row %o, dimensions %o', row, scale.bandwidth());\n\t\t\t\n\n\t\t\tconst cells = row\n\t\t\t\t.selectAll('.cell')\n\t\t\t\t// Row is {bacterium: {} antibiotics: []} – only use antibiotics\n\t\t\t\t.data(this._configuration.rowDataTransformer);\n\n\n\t\t\t// g\n\t\t\tconst gs = cells\n\t\t\t\t.enter()\n\t\t\t\t.append('g')\n\t\t\t\t// data-label attribute (debugging)\n\t\t\t\t.attr('data-label', (d) => {\n\t\t\t\t\treturn this._configuration.cellLabelValue(d);\n\t\t\t\t})\n\t\t\t\t.attr('data-antibiotic', (d) => {\n\t\t\t\t\treturn this._configuration.columnLabelValue(d);\n\t\t\t\t})\n\t\t\t\t// data-color attribute (debugging)\n\t\t\t\t.attr('data-color', (d) => {\n\t\t\t\t\treturn this._configuration.colorValue(d);\n\t\t\t\t})\n\t\t\t\t.attr('class', 'cell');\n\n\n\n\n\t\t\t// Add rect to every g\n\t\t\tthis._drawCellRectangle(gs, scale);\n\n\t\t\t// Label\n\t\t\tthis._drawCellLabel(gs);\n\n\n\n\n\n\t\t\t// Move right\n\t\t\tlet currentRowIndex = 0;\n\t\t\trow\n\t\t\t\t.enter()\n\t\t\t\t.merge(row)\n\t\t\t\t.selectAll('.cell')\n\t\t\t\t.transition()\n\t\t\t\t.duration(this._configuration.transitionDuration)\n\t\t\t\t.attr('transform', (d, i) => {\n\t\t\t\t\t// Reset currentRowIndex if i equals 0 again\n\t\t\t\t\tif (i === 0) currentRowIndex = 0;\n\t\t\t\t\t// Get translation\n\t\t\t\t\tconst translation = `translate(${ this._getMaxRowLabelWidth() + this._configuration.spaceBetweenLabelsAndMatrix + currentRowIndex * scale.step() }, 0)`;\n\t\t\t\t\t// Update currentRowIndex\n\t\t\t\t\tif (!d.hidden) currentRowIndex++;\n\t\t\t\t\treturn translation;\n\t\t\t\t})\n\t\t\t\t.style('opacity', (d) => {\n\t\t\t\t\treturn d.hidden ? 0 : 1;\n\t\t\t\t});\n\n\n\t\t}\n\n\n\t\t/**\n\t\t* Draws the label in a cell\n\t\t*/\n\t\t_drawCellLabel(cells) {\n\n\t\t\treturn;\n\t\t\tconst self = this;\n\n\t\t\tcells.each(function(d) {\n\t\t\t\tconst labelValue = self._configuration.cellLabelValue(d);\n\t\t\t\td3.select(this)\n\t\t\t\t\t.append('text')\n\t\t\t\t\t.attr('class', 'cell-label')\n\t\t\t\t\t.text(labelValue)\n\t\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t\t.attr('transform', function() {\n\t\t\t\t\t\tconst translation = `translate(${ this.getBBox().width / -2 }, ${ this.getBBox().height / 2 - 4 })`;\n\t\t\t\t\t\treturn translation;\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t}\n\n\n\t\t/**\n\t\t* Draws the rectangle in a cell\n\t\t*/\n\t\t_drawCellRectangle(cells, scale) {\n\n\t\t\tconst self = this;\n\n\t\t\tcells.each(function(d) {\n\n\t\t\t\tconst colorValue = self._configuration.colorValue(d);\n\n\t\t\t\td3.select(this)\n\t\t\t\t\t//.append('rect')\n\t\t\t\t\t.append('circle')\n\t\t\t\t\t.style('fill', colorValue === null ? '#fff' : self._colorScale(colorValue))\n\n\t\t\t\t\t// Add white stroke around cells so that mouse over happens smoothly\n\t\t\t\t\t.style('stroke', colorValue === null ? '#dedede' : '#fff')\n\n\t\t\t\t\t// Stroke width: 1px for empty values, else half of the space between the cells\n\t\t\t\t\t.style('stroke-width', colorValue === null ? 1 : (scale.step() - scale.bandwidth()) / 2 )\n\n\t\t\t\t\t// Radius: Remove stroke from radius if stroke's there\n\t\t\t\t\t.attr('r', colorValue === null ? scale.bandwidth() / 2 - 2 : scale.bandwidth() / 2)\n\n\t\t\t\t\t.on('mouseenter', function(d) {\n\t\t\t\t\t\tconst element = this;\n\t\t\t\t\t\tself._mouseOverHandler.call(self, element, d);\n\t\t\t\t\t})\n\n\t\t\t\t\t.on('mouseleave', function() {\n\t\t\t\t\t\tconst element = this;\n\t\t\t\t\t\tself._mouseOutHandler.call(self, element);\n\t\t\t\t\t});\n\n\t\t\t});\n\n\t\t}\n\n\n\n\n\n\t\t/**\n\t\t* Returns the first parent of element that matches selector\n\t\t*/\n\t\t_getParentElement(element, selector) {\n\n\t\t\tlet match;\n\t\t\twhile(element.nodeName.toLowerCase() !== 'svg') {\n\t\t\t\tif (element.matches(selector)) {\n\t\t\t\t\tmatch = element;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telement = element.parentNode;\n\t\t\t}\n\n\t\t\treturn match;\n\n\t\t}\n\n\t\t/**\n\t\t* Returns index of current child that matches selector in its parent\n\t\t*/\n\t\t_getChildNodeIndex(child, selector) {\n\n\t\t\tlet index = 0;\n\t\t\twhile(child.previousSibling) {\n\t\t\t\tif (child.previousSibling.matches(selector)) index++;\n\t\t\t\tchild = child.previousSibling;\n\t\t\t}\n\t\t\treturn index;\n\n\t\t}\n\n\n\t\t/**\n\t\t* Handles mouseenter on a cell\n\t\t*/\n\t\t_mouseOverHandler(element, data) {\n\n\t\t\tconst label = this._configuration.cellLabelValue(data);\n\n\t\t\t// Data not available: Cell has no value. There's no \n\t\t\t// hover effect for empty cells.\n\t\t\tif (!label) return;\n\n\t\t\t// Map svg's DOM element to svg\n\t\t\tlet svg;\n\t\t\tthis._elements.svg.each(function() { svg = this; });\n\n\t\t\tconst y\t\t\t= element.getBoundingClientRect().top - svg.getBoundingClientRect().top\n\t\t\t\t, x\t\t\t= element.getBoundingClientRect().left - svg.getBoundingClientRect().left\n\t\t\t\t, width\t\t= parseInt(element.getBBox().width, 10) + 40\n\t\t\t\t, height\t= parseInt(element.getBBox().height, 10) + 40;\n\n\n\t\t\tthis._mouseOverRect = this._elements.svg\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', `translate(${ x-20 }, ${ y - 20 })`);\n\n\t\t\tthis._mouseOverRect\n\t\t\t\t.append('circle')\n\t\t\t\t.attr('class', 'hover-cell')\n\t\t\t\t.style('fill', element.style.fill)\n\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t.attr('r', width / 2)\n\t\t\t\t.attr('cx', width / 2)\n\t\t\t\t.attr('cy', width / 2);\n\t\t\t\n\t\t\tthis._mouseOverRect\n\t\t\t\t.append('text')\n\t\t\t\t.text(label)\n\t\t\t\t.style('color', 'black')\n\t\t\t\t.style('font-size', '20px')\n\t\t\t\t.style('text-align', 'center')\n\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t.attr('transform', function() {\n\t\t\t\t\treturn `translate(${ width / 2 - this.getBBox().width / 2 }, ${ this.getBBox().height / 2 + height / 2 - 5 })`;\n\t\t\t\t});\n\n\n\t\t\t// Highlight row\n\t\t\tconst row = this._getParentElement(element, '.row');\n\t\t\td3.select(row).classed('active',true);\n\n\t\t\t// Highlight col\n\t\t\tconst cell = this._getParentElement(element, '.cell');\n\t\t\tconst colIndex = this._getChildNodeIndex(cell, '.cell');\n\t\t\tconst currentCol = this._elements.svg.selectAll('.column').filter((d,i) => i === colIndex);\n\t\t\tcurrentCol\n\t\t\t\t.classed('active', true);\n\n\t\t}\n\n\t\t_mouseOutHandler() {\n\n\t\t\tif (this._mouseOverRect) this._mouseOverRect.remove();\n\n\t\t\tthis._elements.svg.selectAll('.row').classed('active', false);\n\t\t\tthis._elements.svg.selectAll('.column').classed('active', false);\n\n\t\t}\n\n\t}\n\n\twindow.infect = window.infect || {};\n\twindow.infect.ResistanceMatrix = ResistanceMatrix;\n\n})();\n\n"]}
{"version":3,"sources":["js/angular/infekt/resistanceMatrixComponent.es2015.js"],"names":["ResistanceMatrixController","$element","changesObj","filters","bacteria","antibiotics","resistances","length","_updateVisibility","_handleDataUpdate","console","log","_data","forEach","bacterium","match","_matchesFilter","hidden","visibleAntibioticIndexes","cell","index","antibiotic","push","row","ab","abIndex","indexOf","_matrix","updateData","item","filterTypes","Object","keys","matchesAllFilters","some","type","filtersForType","isInFilterType","filter","inContainer","containers","find","container","id","error","filtered","filterKey","map","containerValue","warn","intermediateData","_remodelMatrix","empty","infect","ResistanceMatrix","columnHeaderTransformer","data","columnLabelValue","name","columnHeaderIdentifier","rowDataTransformer","rowIdentifier","colorValue","cellLabelValue","labelValue","rowLabelValue","latinName","rowHidden","remodeled","sortedAntibiotics","sort","a","b","resistance","col","value","Math","round","$inject","angular","module","component","controller","bindings"],"mappings":"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","file":"resistanceMatrixComponent.es2015.js","sourcesContent":["(() => {\n\n\t/* global angular, infect */\n\n\tclass ResistanceMatrixController {\n\n\t\tconstructor($element) {\n\t\t\tthis.$element = $element;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Change handler for the component's bindings\n\t\t*/\n\t\t$onChanges(changesObj) {\n\n\t\t\t// Filters changed: Update visibility – but only if data is available. If it's not, \n\t\t\t// there's no need to filter, as table is empty.\n\t\t\tif (changesObj.filters && (this.bacteria && this.antibiotics && this.resistances) && (this.bacteria.length && this.antibiotics.length && this.resistances.length)) {\n\t\t\t\tthis._updateVisibility();\n\t\t\t}\n\n\t\t\t// Change concerns the data property:\n\t\t\t// Upgrade data to have the format that ResistencyMatrix requires\n\t\t\t// Ignore empty data\n\t\t\tif ((changesObj.resistances || changesObj.bacteria || changesObj.antibiotics) && (this.antibiotics && this.bacteria && this.resistances) && (this.antibiotics.length && this.bacteria.length && this.resistances.length)) {\n\t\t\t\t// Let's assume this is the initial rendering and won't be called afterwards\n\t\t\t\tthis._handleDataUpdate(this.antibiotics, this.bacteria, this.resistances);\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Updates visibility of rows and columsn to match this.filters. Handler for changes on this.filters.\n\t\t*/\n\t\t_updateVisibility() {\n\n\t\t\tconsole.log('ResistanceMatrixController: filters are %o', this.filters);\n\n\t\t\tif (!this._data) return;\n\n\n\n\t\t\t// Filter BACTERIA\n\t\t\tthis._data.forEach((bacterium) => {\n\t\t\t\tconst match = this._matchesFilter(bacterium.bacterium, this.filters.bacterium);\n\t\t\t\tif (match) console.log('ResistanceMatrixController: Matches: %o', bacterium);\n\t\t\t\tbacterium.bacterium.hidden = !match;\n\t\t\t});\n\n\n\n\t\t\t// Filter ANTIBIOTICS\n\t\t\tconst antibiotics = this._data[0].antibiotics;\n\n\t\t\t// Get indexes of all visible antibiotics; we only want to calculate the filters once\n\t\t\tconst visibleAntibioticIndexes = [];\n\t\t\tantibiotics.forEach((cell, index) => {\n\t\t\t\tif (this._matchesFilter(cell.antibiotic, this.filters.antibiotic)) {\n\t\t\t\t\tvisibleAntibioticIndexes.push(index);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Go through rows, then antibiotics, and update the «hidden» property on them\n\t\t\tthis._data.forEach((row) => {\n\t\t\t\trow.antibiotics.forEach((ab, abIndex) => {\n\t\t\t\t\tab.hidden = visibleAntibioticIndexes.indexOf(abIndex) > -1 ? false : true;\n\t\t\t\t});\n\t\t\t});\n\n\n\n\t\t\tthis._matrix.updateData(this._data);\n\n\n\t\t}\n\n\n\t\t/**\n\t\t* Takes bacterium or ab as item and the corresponding filters as filters and returns true if\n\t\t* the item is part of the filters. \n\t\t*/\n\t\t_matchesFilter(item, filters) {\n\n\t\t\t// Types of filters as array (e.g. ['gram'])\n\t\t\tconst filterTypes = Object.keys(filters);\n\n\t\t\t// Return value – true if all filter types are matched\n\t\t\tlet matchesAllFilters = true;\n\n\t\t\t// Loop filter types – e.g. name, gram etc.\n\t\t\tfilterTypes.some((type) => {\n\n\t\t\t\t// Same type of filter: They are additional, take all values\n\t\t\t\tconst filtersForType = filters[type];\n\t\t\t\t//console.log('ResistanceMatrixController: Filter by type %o', type);\n\t\t\t\t\t\n\t\t\t\t// Is item part of the current filter type?\n\t\t\t\tlet isInFilterType = false;\n\t\t\t\tfiltersForType.some((filter) => {\n\n\t\t\t\t\t// Filter is in container\n\t\t\t\t\tconst inContainer = filter.containers.find((container) => container.id === item.id);\n\t\t\t\t\tisInFilterType = !!inContainer;\n\n\t\t\t\t\t// Break\n\t\t\t\t\tif (isInFilterType) return true;\n\t\t\t\t\t\n\t\t\t\t});\n\n\t\t\t\tif (!isInFilterType) {\n\t\t\t\t\t//console.log('ResistanceMatrixController: %o is not in filters %o', item, filters[type]);\n\t\t\t\t\tmatchesAllFilters = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\treturn matchesAllFilters;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Filters bacteria (clone from this.bacteria) with filters from this.filters\n\t\t*/\n\t\t_filterBacteria(bacteria, filters) {\n\t\t\tconsole.error(filters);\n\t\t\treturn bacteria;\n\t\t}\n\n\n\t\t/**\n\t\t* Filters antibiotics (clone from from this.antibiocs) with filters from \n\t\t* this.filters\n\t\t*/\n\t\t_filterAntibiotics(antibiotics, filters) {\n\n\t\t\tconst filtered = [];\n\n\t\t\tObject.keys(filters).forEach((filterKey) => {\n\t\t\t\t// Go through filters on a type, e.g. substances\n\t\t\t\tfilters[filterKey].forEach((filter) => {\n\n\t\t\t\t\t// Go through all antibiotics and check if they're part of \n\t\t\t\t\t// the container\n\t\t\t\t\tantibiotics.forEach((antibiotic) => {\n\t\t\t\t\t\tif (filter.containers.map((containerValue) => containerValue.id).indexOf(antibiotic.id) > -1) {\n\t\t\t\t\t\t\tfiltered.push(antibiotic);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconsole.error('filtered: %o', filtered);\n\t\t\treturn filtered;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Called whenever reistance, bacteria or antibiotics change: \n\t\t* Re-format data and update matrix\n\t\t*/\n\t\t_handleDataUpdate(antibiotics, bacteria, resistances) {\n\n\t\t\t\tconsole.warn('ResistanceMatrixController: resistances is %o, antibiotics %o, bacteria %o', resistances, antibiotics, bacteria);\n\n\t\t\t\t// Conversion 1\n\t\t\t\tconst intermediateData = this._remodelMatrix(bacteria, antibiotics, resistances);\n\t\t\t\tconsole.log('ResistanceMatrixController: intermediateData is %o', intermediateData);\n\n\t\t\t\t// Conversion 2\n\t\t\t\t//const internalData = this._prepareMatrixForComponent(intermediateData);\n\t\t\t\t//console.log('ResistanceMatrixController / $onChanges: internalData is %o', internalData);\n\t\t\t\tthis._data = intermediateData;\n\n\t\t\t\t// Draw matrix, because it has not yet been initialized\n\t\t\t\t// Afterwards only update data and don't change scale\n\t\t\t\tif (!this._matrix) {\n\n\t\t\t\t\tthis.$element.empty();\n\n\t\t\t\t\t// Create matrix\n\t\t\t\t\tthis._matrix = new infect.ResistanceMatrix(this.$element[0], this._data, {\n\t\t\t\t\t\tcolumnHeaderTransformer\t\t\t\t: (data) => {\n\t\t\t\t\t\t\t\treturn data[0].antibiotics.map((item) => item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t, columnLabelValue\t\t\t\t\t: (item) => item.antibiotic.name\n\t\t\t\t\t\t, columnHeaderIdentifier\t\t\t: (item) => item.antibiotic.id\n\t\t\t\t\t\t, rowDataTransformer\t\t\t\t: (item) => item.antibiotics\n\t\t\t\t\t\t, rowIdentifier\t\t\t\t\t\t: (item) => item.bacterium.id\n\t\t\t\t\t\t, colorValue\t\t\t\t\t\t: (item) => item.colorValue\n\t\t\t\t\t\t, cellLabelValue\t\t\t\t\t: (item) => item.labelValue === null ? '' : item.labelValue\n\t\t\t\t\t\t, rowLabelValue\t\t\t\t\t\t: (item) => item.bacterium.latinName\n\t\t\t\t\t\t, rowHidden\t\t\t\t\t\t\t: (item) => item.bacterium.hidden\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t}\n\n\n\t\t/**\n\t\t* Takes bacteria, antibiotics and resistances and creates a table consisting of Maps\n\t\t*\n\t\t* {\n\t\t*\t[bacteriumObject]\t\t: {\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t}\n\t\t* }, {\n\t\t*\t[bacteriumObject]\t\t: {\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t}\n\t\t* }\n\t\t*\n\t\t*/\n\t\t_remodelMatrix(bacteria, antibiotics, resistances) {\n\n\t\t\t// Map with key: bacterium, value: Map with key: antibiotic, value: reistance\n\t\t\tconst remodeled = [];\n\n\t\t\t// Sort antibiotics (as they will be re-used when creating the cols)\n\t\t\tconst sortedAntibiotics = antibiotics\n\t\t\t\t.sort((a, b) => a.name < b.name ? -1 : 1);\n\n\t\t\t// Create rows (bacteria) with cols (antibiotics)\n\t\t\tbacteria\n\t\t\t\t.sort((a, b) => a.latinName < b.latinName ? -1 : 1 )\n\t\t\t\t.forEach((bacterium) => {\n\t\t\t\t\tconst row = [];\n\t\t\t\t\tsortedAntibiotics.forEach((antibiotic) => {\n\t\t\t\t\t\trow.push({\n\t\t\t\t\t\t\tantibiotic\t\t: antibiotic\n\t\t\t\t\t\t\t// null is the default resistance\n\t\t\t\t\t\t\t, colorValue\t: null\n\t\t\t\t\t\t});\n\t\t\t\t\t});\t\t\t\t\n\t\t\t\t\tremodeled.push({\n\t\t\t\t\t\tbacterium\t\t\t: bacterium\n\t\t\t\t\t\t, antibiotics\t\t: row\n\t\t\t\t\t});\n\t\t\t\t});\n\n\n\t\t\t// Write resistance on value property of the mapping between antibiotic and bacterium\n\t\t\tresistances.forEach((resistance) => {\n\n\t\t\t\t// Get bacterium\n\t\t\t\tconst bacterium = remodeled.find((row) => row.bacterium === resistance.bacterium);\n\t\t\t\tif (!bacterium) return;\n\n\t\t\t\tconst antibiotic = bacterium.antibiotics.find((col) => col.antibiotic === resistance.antibiotic);\n\t\t\t\tif (!antibiotic) return;\n\n\t\t\t\tif (resistance.type === 'resistanceDefault') {\n\n\t\t\t\t\tswitch (resistance.value) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tantibiotic.colorValue = 0;\n\t\t\t\t\t\t\tantibiotic.labelValue = 'L';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tantibiotic.colorValue = 0.3;\n\t\t\t\t\t\t\tantibiotic.labelValue = 'I';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tantibiotic.colorValue = 0.7;\n\t\t\t\t\t\t\tantibiotic.labelValue = 'H';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault: \n\t\t\t\t\t\t\tconsole.error('Unknown resistance %o', resistance);\n\t\t\t\t\t\t\tantibiotic.colorValue = null;\n\t\t\t\t\t\t\tantibiotic.labelValue = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tantibiotic.colorValue = resistance.value === null ? null : resistance.value / 100;\n\t\t\t\t\tantibiotic.labelValue = resistance.value === null ? '' : Math.round(resistance.value) + '%';\n\t\t\t\t}\n\n\t\t\t\t//console.error(resistance.type, resistance.value, antibiotic.colorValue, antibiotic.labelValue);\n\n\t\t\t});\n\n\t\t\treturn remodeled;\n\n\t\t}\n\n\t}\n\n\n\tResistanceMatrixController.$inject = ['$element'];\n\n\n\tangular\n\t.module('infekt')\n\t.component('resistanceMatrix', {\n\t\tcontroller\t\t\t: ResistanceMatrixController\n\t\t//, template\t\t\t: 'test {{$ctrl.filters | json}}#'\n\t\t, bindings\t\t\t: {\n\t\t\tresistances\t\t: '<' // One-way from parent\n\t\t\t, antibiotics\t: '<'\n\t\t\t, bacteria\t\t: '<'\n\t\t\t, filters\t\t: '<'\n\t\t}\n\t});\n\n})();\n"]}